Remove duplicates from an unsorted linked list:

Given an unsorted linked list. The task is to remove duplicate elements from this unsorted Linked List. When a value appears in multiple nodes, the node which appeared first should be kept, all other duplicates are to be removed.

Examples:

Input: LinkedList: 5->2->2->4
Output: 5->2->4
Explanation: Given linked list elements are 5->2->2->4, in which 2 is repeated only. So, we will delete the extra repeated elements 2 from the linked list and the resultant linked list will contain 5->2->4
 
Input: LinkedList: 2->2->2->2->2
Output: 2
Explanation:
Given linked list elements are 2->2->2->2->2, in which 2 is repeated. So, we will delete the extra repeated elements 2 from the linked list and the resultant linked list will contain only 2.
Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Constraints:
1 <= number of nodes <= 106
0 <= node->data <= 106

Solution:

class Solution {
    // Function to remove duplicates from unsorted linked list.
    public Node removeDuplicates(Node head) {
        Node curr1=head;
        while(curr1!=null)
        {
            Node curr2=curr1;
            while(curr2.next!=null)
            {
                if(curr2.next.data==curr1.data)
                {
                    curr2.next=curr2.next.next;
                }
                else
                {
                    curr2=curr2.next;
                }
            }
            curr1=curr1.next;
        }
        return head;
    }
}


